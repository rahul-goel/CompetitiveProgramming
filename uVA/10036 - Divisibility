/*
	Created by Rahul Goel.
*/
 
#include <iostream>
#include <vector>
#include <cstring>
#include <string>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <cmath>
 
using namespace std;
typedef long long ll;
ll mod = 1000000007;
const int INF = 1000000000;
 
#define pii pair < int, int >
#define vi vector < int >
#define vvi vector < vector < int > >
#define vpii vector < pair < int, int > >
#define vvpii vector < vector < pair < int, int > > >
#define pb push_back
#define f first
#define s second
#define mp make_pair

bool memo[10005][105];
bool visited[10005][105];
vector < int > vec;

bool dp(int n_state, int k_state, int n, int k){
    if(n_state == n && k_state == 0)
        return true;
    else if(n_state == n)
        return false;

    if(visited[n_state][k_state])
        return memo[n_state][k_state];
    visited[n_state][k_state] = true;
    
    return memo[n_state][k_state] = (dp(n_state+1, (k_state+vec[n_state]+k)%k, n, k) || dp(n_state+1, (k_state-vec[n_state]+k)%k, n, k));
}

int main(){
    int m;
    cin >> m;
    while(m--){
        int n, k;
        cin >> n >> k;
        
        vec.clear(), vec.resize(n, 0);
        for(int i=0; i<n+5; i++)
            for(int j=0; j<k+5; j++)
                visited[i][j] = false;

        for(int i=0; i<n; i++){
            cin >> vec[i];
            vec[i] = (vec[i]%k + k)%k;
        }

        bool ans = dp(1, (vec[0]+k)%k, n, k);
        
        if(ans)
            cout << "Divisible\n";
        else
            cout << "Not divisible\n";
    }
    return 0;
}
